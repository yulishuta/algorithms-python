#!/usr/bin/python
# -*- coding: UTF-8 -*-

# 分隔数组以得到最大和

import time


class Solution(object):
    def maxSumAfterPartitioning(self, A, K):
        """
        :type A: List[int]
        :type K: int
        :rtype: int
        """
        # n = len(A)
        # nodes = range(0, n+1)
        # dpmax = dict.fromkeys(nodes, 0)

        # # 修改一下
        for i,val in enumerate(A):
            j=i+1
            k = 1
            maxVal = 0
            while k <= K and j-k >= 0:
                incArr = A[j-k:j]
                incSum = max(incArr)*k
                currentDpmax = dpmax[j-k] + incSum
                if (currentDpmax > maxVal):
                    maxVal = currentDpmax
                k = k+1
            dpmax[j] = maxVal

        return dpmax[n]

        n=len(A)
        res=[0]*(n+1)
        for i in range(1,n+1) :
            j=i-1
            mx=float("-inf")
            while i-j <= K and j >= 0 :
                #由于不知道lastSubA的大小，因此对lastSubA的所有可能都进行计算，取最大的
                mx=max(mx,A[j])
                res[i]=max(res[i],res[j]+mx*(i-j)) 
                j-=1
        return res[n]



if __name__ == "__main__":
    startTime = time.time()
    grid = [1, 15, 7, 9, 2, 5, 10]
    grid = [194366,265275,7841,985702,453186,259660,146399,272322,677367,940271,953275,755500,317988,170332,307956,424600,328900,343358,492537,195303,904539,428529,281044,38878,901697,536210,415774,527995,854338,228387,356591,935678,846499,691185,147679,28460,637178,133458,540603,537503,842665,207265,332604,666548,265608,193194,679864,353419,841108,527841,745803,288193,357450,156744,885507,623400,990201,228174,339483,9769,354197,562385,124149,50054,271003,908146,24077,700920,434555,3611,457409,645686,527513,411853,972538,845238,864629,484894,498503,540945,336417,409850,100060,267255,423981,777818,326807,220091,256469,4464,599555,554946,243698,625043,215750,69891,728697,224348,708851,926216,393722,28119,575918,811645,117155,356687,304674,518609,899190,20488,628477,258216,372640,172926,190102,909848,319764,407113,934125,499104,679944,681638,798218,983308,952092,185083,687629,38099,355976,835170,337052,589763,248336,570099,672332,335003,849227,85693,419847,507085,988070,875817,651340,165662,411498,396830,645811,698393,791078,710152,342945,963330,196946,633280,874970,408025,698154,898983,310776,758871,226602,540005,204551,711929,61889,133751,928924,871595,3078,603538,888336,399345,916658,595340,320817,210711,296081,245933,624773,467379,637489,259511,495247,287658,813518,779747,136600,825583,536940,802222,999245,964884,908220,155322,103726,87991,596246,329037,384814,211926,235443,219978,657420,683108,591003,694579,373171,401777,820763,790375,619901,651129,194854,753983,776551,531989,528250,659503,243804,916447,717675,12350,34267,103958,453605,347448,375339,40468,197852,53487,63416,988904,770935,682397,588325,897650,751151,551327,579860,866176,647753,297145,551450,873153,926568,627917,91137,283319,571045,145040,766171,285663,818310,259137,950976,772021,565872,510781,425538,587880,125299,30966,229606,724627,540031,86624,760909,645120,257069,886692,5019,63442,829655,224327,184450,955748,917861,285432,635934,993546,16946,128163,875566,456815,479969,508061,160192,883499,400028,578776,655904,269700,863005,300749,197999,784891,236211,864333,450056,150282,867775,986444,897708,232454,277627,89938,424210,995803,472307,262565,229624,742347,446903,649812,439787,600055,210134,748967,710974,703715,471024,696087,24844,783686,955805,629239,87943,797947,510246,220374,276492,512530,312557,144387,96128,529644,512392,848703,909328,331321,195611,473826,130530,264234,6342,417831,203009,727548,474304,503421,881510,899399,705335,700036,1397,648283,141952,925795,552101,872875,109595,526591,669270,958729,405549,259736,990319,935189,885484,460554,343575,496155,142751,684003,460402,101883,467534,666079,87137,583003,566128,789097,199002,526374,25319,64789,663898,293472,411433,372088,382607,944066,36037,366214,745380,881111,331169,368271,820765,716291,638014,751098,564247,341354,332347,336498,861495,57504,179167,453811,641904,273987,767574,530239,99179,497722,513930,52024,901561,659132,469563,41200,362665,173985,517607,355780,427546,23595,642819,183668,239731,950983,861267,881932,353004,24760,586055,485752,755309,502135,281386,956009,567281,107295,149904,218794,318977,287050,367,971874,882999,688696,222031,994749,346769,932932,520402,213731,424379,708650,737199,73875,509984,313989,714169,728480,705975,765330,286478,745350,393981,331387,394434,774239,597182,170480,352373,523441,111922,996453,457002,212400,192907,421128,998416,851675,929680,608096,414772,327902,409981,341347,877413,166464,345316,839054,978832,253777,329115,279368]

    solution = Solution()
    print(solution.maxSumAfterPartitioning(grid, 500))
    # print(solution.findMinHeightTrees(909, grid))

    print('执行时间---%d', time.time() - startTime)
